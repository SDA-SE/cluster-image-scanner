# Default values for image-metadata-orchestrator.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: "argo-workflow"
  # the Role to assume by the SA
  awsRoleArn: ""

securityContext:
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  capabilities:
    drop:
      - ALL
  runAsUser: 56315

resources:
  limits:
    memory: 128Mi
  requests:
    memory: 128Mi
    cpu: 50m

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

cronSchedule: "*/1 * * * 1-5"

api:
  host: ""
  version: "v1"

credentials:
  apikey: ""
  signature: ""

storage:
  # An S3 bucket through which temporary data is handed over to subflows.
  # Usually provided through the argo-wf installation.
  s3:
    endpoint: "s3.eu-central-1.amazonaws.com"
    bucket: ""
    insecure: false
    useSDKCreds: true
defectdojo:
  branchesToKeep: "*"
  reportPath: "/tmp/dependency-check-results/dependency-check-report.xml"
  lead: "3"
  user: ""
  url: ""
  importType: "import"
  markedAsActive: "true"
  markedAsInactive: "false"
  deduplicationOnEngagement: "false"
  gitUrl: "https://github.com/sda-se"
  token: ""

dependencytrack:
  url: ""
  key: ""

github:
  appId: ""
  appLogin: ""
  installationId: ""
  privateKeyPem: ""

registry:
  authJson: ""

imageSourceList:
  image-lifetime: "https://api.github.com/repos/SDA-SE/cluster-scan-test-images/contents/image-lifetime.json"

scanjob:
  ddDaysToKeepWithoutUpload: "0" # 0 disables cleanup
  errorNotificationIgnore: 'DiskPressure\|imagefetcher.*sj-tools-kube-system\|sj-si-verzahnung-defectdojo'
  jobExecutionNamespace: "argowf"
  ddNameTemplate: "###ENVIRONMENT### | ###NAMESPACE###"
  override:
    isScanDTrack: "false"
  registryOverride:
    dockerA:
      from: "docker~io"
      to: ""
    dockerIo:
      from: 'docker\.io'
      to: ""
    default:
      from: '\(^[^\.]*:.*\)'
      to: ''

slack:
  cliToken: ""
