apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: orchestration-job-template
  namespace: clusterscanner
spec:
  activeDeadlineSeconds: 21600 # 6h
  entrypoint: main # Entry point for job execution
  workflowSpec:
    #serviceAccountName: clusterscanner
    ttlStrategy:
      secondsAfterSuccess: 172800
      secondsAfterFailure: 172800
    artifactRepositoryRef:
      configMap: artifact-repositories
      key: default-v1
  inputs:
    parameters:
      - workflow.parameters.imageSourceListConfigMapName
      - workflow.parameters.gitSecretName
      - workflow.parameters.scanId
      - workflow.parameters.registrySecretName
      - workflow.parameters.dependencyCheckDbConfigMapName
      - workflow.parameters.defectDojoConfigMapName
      - workflow.parameters.slackTokenSecretName
      - workflow.parameters.emailSecretName
      - workflow.parameters.enforceSlackChannel
      - workflow.parameters.newVersionImageFilter
      - workflow.parameters.dependencyCheckSuppressionsConfigMapName
      - workflow.parameters.allResultsGitTarget
      - workflow.parameters.baseImageName
      - workflow.parameters.defectDojoClientImageName
      - workflow.parameters.imageSourceFetcherImageName
      - workflow.parameters.imageCollectorImageName
      - workflow.parameters.workflowRunnerImageName
      - workflow.parameters.scanDistrolessImageName
      - workflow.parameters.scanDependencyCheckImageName
      - workflow.parameters.scanMalwareImageName
      - workflow.parameters.scanRootImageName
      - workflow.parameters.scanLifetimeImageName
      - workflow.parameters.scanNewVersionImageName
      - workflow.parameters.scanSyftImageName
  templates:
    - name: main
      steps:
        - - name: fetch-image-list
            template: fetch-image-list
        - - name: run-subflow
            template: subflow
            arguments:
              artifacts:
                - name: imageList
                  from: "{{steps.fetch-image-list.outputs.artifacts.image-list-merged}}"
        - - name: notify-teams
            template: notify-teams
        - - name: git-upload-report
            template: git-upload-report
    #            when: "{{ workflow.parameters.allResultsGitTarget }} == "

    - name: fetch-image-list
      outputs:
        artifacts:
          - name: image-lists
            path: /clusterscanner/out
            archive:
              none: {}
          - name: image-list-merged
            path: /clusterscanner/out/merged/merged.json
            archive:
              none: {}
      volumes:
        - name: "{{ workflow.parameters.imageSourceListConfigMapName }}"
          configMap:
            name: "{{ workflow.parameters.imageSourceListConfigMapName }}"
        - name: "{{ workflow.parameters.gitSecretName }}"
          secret:
            secretName: "{{ workflow.parameters.gitSecretName }}"
        - name: tmp
          emptyDir: {}
      container:
        image: "{{ workflow.parameters.imageSourceFetcherImageName }}"
        imagePullPolicy: Always
        command: ["/clusterscanner/entrypoint.bash"]
        volumeMounts:
          - name: "{{ workflow.parameters.gitSecretName }}"
            mountPath: /clusterscanner/github/github_private_key.pem
            subPath: github_private_key.pem
          - name: "{{ workflow.parameters.imageSourceListConfigMapName }}"
            mountPath: /clusterscanner/image-source-list
          - name: tmp
            mountPath: /clusterscanner/out
        env:
          - name: GITHUB_KEY_FILE_PATH
            value: /clusterscanner/github/github_private_key.pem
        envFrom:
          - secretRef:
              name: "{{ workflow.parameters.gitSecretName }}"
          - configMapRef:
              name: "scanjob-env-parameter"

    - name: subflow
      inputs:
        artifacts:
          - name: imageList
            path: /clusterscanner/imageList.json
            mode: 0444
      container:
        image: "{{ workflow.parameters.workflowRunnerImageName }}"
        command: ["/clusterscanner/entrypoint.bash"]
        imagePullPolicy: Always
        envFrom:
          - configMapRef:
              name: "scanjob-env-parameter"
        env:
          - name: SCAN_ID
            value: "{{ workflow.parameters.scanId }}"
          - name: REGISTRY_SECRET
            value: "{{ workflow.parameters.registrySecretName }}"
          - name: DEPENDENCY_SCAN_CM
            value: "{{ workflow.parameters.dependencyCheckDbConfigMapName }}"
          - name: DEFECTDOJO_CM
            value: "{{ workflow.parameters.defectDojoConfigMapName }}"
          - name: DEFECTDOJO_SECRETS
            value: "{{ workflow.parameters.defectDojoConfigMapName }}"
          - name: MAX_RUNNING_JOBS_IN_QUEUE
            value: "4" # too many jobs create disk pressure
          - name: dependencyCheckSuppressionsConfigMapName
            value: "{{ workflow.parameters.dependencyCheckSuppressionsConfigMapName }}"
          - name: NEW_VERSION_IMAGE_FIILTER
            value: "{{ workflow.parameters.newVersionImageFilter }}"
          - name: baseImageName
            value: "{{ workflow.parameters.baseImageName }}"
          - name: defectDojoClientImageName
            value: "{{ workflow.parameters.defectDojoClientImageName }}"
          - name: scanDistrolessImageName
            value: "{{ workflow.parameters.scanDistrolessImageName }}"
          - name: scanDependencyCheckImageName
            value: "{{ workflow.parameters.scanDependencyCheckImageName }}"
          - name: scanMalwareImageName
            value: "{{ workflow.parameters.scanMalwareImageName }}"
          - name: scanRootImageName
            value: "{{ workflow.parameters.scanRootImageName }}"
          - name: scanLifetimeImageName
            value: "{{ workflow.parameters.scanLifetimeImageName }}"
          - name: scanNewVersionImageName
            value: "{{ workflow.parameters.scanNewVersionImageName }}"
          - name: notifierImageName
            value: "{{ workflow.parameters.notifierImageName }}"
          - name: scanSyftImageName
            value: "{{ workflow.parameters.scanSyftImageName }}"

    - name: notify-teams
      volumes:
        - name: scandata
          persistentVolumeClaim:
            claimName: cluster-image-scanner-scandata
      script:
        image: "{{ workflow.parameters.notifierImageName }}"
        volumeMounts:
          - name: scandata
            mountPath: /clusterscanner/data
            subPath: "{{ workflow.parameters.scanId }}"
        imagePullPolicy: Always
        env:
          - name: SLACK_CLI_TOKEN
            valueFrom:
              secretKeyRef:
                name: "{{ workflow.parameters.slackTokenSecretName }}"
                key: SLACK_CLI_TOKEN
          - name: ENFORCE_SLACK_CHANNEL
            value: "{{ workflow.parameters.enforceSlackChannel }}"
          - name: SCAN_NEW_VERSION_TOLERANCE_DAYS # time, in which the new version finding is in DefectDojo, but teams are not notified
            value: "4"
          - name: smtp
            valueFrom:
              secretKeyRef:
                name: "{{ workflow.parameters.emailSecretName }}"
                key: smtp
          - name: smtp-auth
            valueFrom:
              secretKeyRef:
                name: "{{ workflow.parameters.emailSecretName }}"
                key: smtp-auth
          - name: smtp-auth-user
            valueFrom:
              secretKeyRef:
                name: "{{ workflow.parameters.emailSecretName }}"
                key: smtp-auth-user
          - name: smtp-auth-password
            valueFrom:
              secretKeyRef:
                name: "{{ workflow.parameters.emailSecretName }}"
                key: smtp-auth-password
        envFrom:
          - configMapRef:
              name: "scanjob-env-parameter"
        command: [/bin/bash]
        source: |
          #set -e
          shopt -s globstar nullglob

          if [ "${RESULT_PATH}" == "" ]; then
            RESULT_PATH=/clusterscanner/data
          fi

          inform() {
            echo "image: ${image}, appName ${appName}, team: ${team}, namespace: ${namespace}, environment: ${environment}, ddLink: ${ddLink}, slackChannel: ${slack}, email: ${email}, scanType: ${scanType}, title: ${title}"

            #slack="#nobody-security" # for testing
            if [ "${slack}" != "" ]; then
              if [ "${SLACK_CLI_TOKEN}" == "" ]; then
                echo "SLACK_CLI_TOKEN not set, exit"
                exit 1
              fi
              echo "Sending to slack ${slack}"
              # shellcheck disable=SC2001
              message=$(echo "${message}" | sed 's#"##g')

              ${SLACK_BIN} chat send --actions '{"type": "button", "style": "primary", "text": "Handle potential vulnerabilities", "url": "'${ddLink}'"}' \
                --author 'ClusterImageScanner' \
                --channel "${slack}" \
                --title "${title}" \
                --text "${message}"
              #                --fields 'image: '${image}', app: '${appName}', namespace: '${namespace}', envirnoment: '${environment} \
            else
              echo "slackChannel not set"
            fi

            if [ "${email}" != "null" ] && [ "${email}" != "" ]; then
              echo "Sending to email ${email}"
              if [ "${smtp-auth-user}" != "USERNAME@YOURDOMAIN.COM" ] && [ "${smtp-auth-user}" != "" ] && [ "${smtp-auth}" != "smtp_auth_SECRET" ]; then
                message="$message\nimage: ${image}, app: ${appName}, namespace: ${namespace}, environment: ${environment}, link to DefectDojo: ${ddLink}"
                echo -e "${message}" | mail -s "Found unhandled findings" "${email}" || echo "ERROR during sending ${message}"
              else
                echo "Warning: email set, but no email configured"
              fi
            else
              echo "Hint: email not set"
            fi
          }
          errors=""
          for file in "${RESULT_PATH}"/**/*.json; do
            echo "found file ${file}"
            item=$(cat "${file}")
            image=$(echo "${item}" | jq -r '.image'| tr -cd '[:alnum:]./@:_-')
            team=$(echo "${item}" | jq -r '.team'| tr -cd '[:alnum:]._-')
            namespace=$(echo "${item}" | jq -r '.namespace'| tr -cd '[:alnum:]._-')
            environment=$(echo "${item}" | jq -r '.environment'| tr -cd '[:alnum:]._-')
            slack=$(echo "${item}" | jq -r '.slack')
            appName=$(echo "${item}" | jq -r '.appname'| tr -cd '[:alnum:]._-')
            email=$(echo "${item}" | jq -r '.email')
            if [ "${ENFORCE_SLACK_CHANNEL}" != "" ]; then
              slack="${ENFORCE_SLACK_CHANNEL}"
            fi
            echo "Inspecting team ${team} for image ${image}"
            for result in $(echo "${item}" | jq -rcM '.uploadResults[] | @base64'); do
              for result2 in $(echo "${result}" | base64 -d | jq -rcM '.[] | @base64'); do
                notifications=$(echo "${result2}" | base64 -d | jq -rcM 'select(.finding == true)')
                while IFS= read -r notification; do
                  echo "in notification for ${image}"
                  ddLinkTest=$(echo "${notification}" | jq -r ".ddLink")
                  infoText=$(echo "${notification}" | jq -r ".infoText" | sed 's#{#(#g' | sed 's#}#)#g' | sed 's#"#_#g' | tr -cd '[:alnum:]._ \n:@*+()[]-')   # at least { } needs to be removed for the slack cli
                  errorText=$(echo "${notification}" | jq -r ".errorText" | tr -cd '[:alnum:]._ \n:@*+()[]-' || true)
                  status=$(echo "${notification}" | jq -r ".status" | tr -cd '[:alnum:]._ -')
                  ddLinkScheme=$(echo "${ddLinkTest}" | tr '/' ' ' | awk '{print $1}')
                  ddLinkDomain=$(echo "${ddLinkTest}" | tr '/' ' ' | awk '{print $2}')
                  ddLinkBase="${ddLinkScheme}//${ddLinkDomain}"
                  for findingBase in $(echo "${notification}" | jq -rcM '.findings[] | @base64'); do
                    finding=$(echo "${findingBase}" | base64 -d)
                    findingId=$(echo "${finding}" | jq -r '.id' | tr -cd '[:alnum:]._ -')
                    if [ "${findingId}" != "null" ] && [ "${findingId}" != "" ]; then
                      ddLink="${ddLinkBase}/finding/${findingId}"
                    else
                      ddLink="${ddLinkTest}"
                    fi
                    title=$(echo "${finding}" | jq -r '.title' | cut -c1-50 | sed 's#{##g'| sed 's#}##g') #| tr -cd '[:alnum:]._ <>-')
                    if [ "$title" == "Image Has a New Version" ]; then
                      scanResultFindingFinishedAt=$(echo "${item}" | jq -r '.scanResults[]["scan-new-version"].cachedUsedAt' | grep -v null)
                      t1=$(date --date="${scanResultFindingFinishedAt}" +%s)

                      # Current date
                      dt2=$(date +%Y-%m-%d\ %H:%M:%S)
                      # Compute the seconds since epoch for date 2
                      t2=$(date --date="${dt2}" +%s)
                      # difference in dates in seconds
                      tDiff="$(( t2-t1 ))"
                      # hour difference
                      hDiff="$(( tDiff/3600 ))" || true
                      # day difference
                      dDiff="$(( hDiff/24 ))" || true
                      echo "t1: ${t1}, t2: ${t2}, dDiff: ${dDiff}"
                      if [ ${dDiff} -lt ${SCAN_NEW_VERSION_TOLERANCE_DAYS} ]; then
                        echo "${dDiff} is less than ${SCAN_NEW_VERSION_MAX_TOLERANCE_DAYS}, skipping notification of ${image} in ${namespace} on ${environment}"
                        continue
                      fi
                    fi
                    title="${title} in ${image}"
                    severity=$(echo "${finding}" | jq -r ".severity" | tr -cd '[:alnum:]._ -')
                    description=$(echo "${finding}" | jq -r '.description' | sed 's#{##g'| sed 's#}##g')
                    message="${infoText}\n${description}\nSeverity: ${severity}\nScan Job Status: ${status}"
                    if [ "${errorText}" != "null" ] && [ "${errorText}" != "[]" ] && [ "${errorText}" != "" ]; then
                      message="${message}\nError: ${errorText}"
                    fi
                    output=$(inform "${image}" "${appName}" "${team}" "${namespace}" "${environment}" "${ddLink}" "${slack}" "${email}" "${title}" "${message}" || true)
                    echo "${output}"
                    if [ "$(echo "${output}" | grep -c '"ok": false')" -gt 0 ]; then
                      echo "error in slack"
                      errors="${errors}\n${output}"
                    fi
                    if [ "$(echo "${output}" | grep -c ratelimited)" -gt 0 ]; then
                      sleep 120 # wait for rate limt
                      inform "${image}" "${appName}" "${team}" "${namespace}" "${environment}" "${ddLink}" "${slack}" "${email}" "${title}" "${message}"
                    fi
                    sleep 1 # reduce risk of rate limit
                  done
                done <<< "${notifications}"
              done
            done
          done
          echo "${errors}"

    - name: git-upload-report
      volumes:
        - name: scandata
          persistentVolumeClaim:
            claimName: cluster-image-scanner-scandata
        - name: "{{ workflow.parameters.gitSecretName }}"
          secret:
            secretName: "{{ workflow.parameters.gitSecretName }}"
      script:
        image: "{{ workflow.parameters.imageCollectorImageName }}"
        volumeMounts:
          - name: scandata
            mountPath: /clusterscanner/data
            subPath: "{{ workflow.parameters.scanId }}"
          - name: "{{ workflow.parameters.gitSecretName }}"
            mountPath: /clusterscanner/github/github_private_key.pem
            subPath: github_private_key.pem
        imagePullPolicy: IfNotPresent
        env:
          - name: ENVIRNOMENT
            value: "{{ workflow.parameters.scanId }}"
          - name: SCAN_ID
            value: "{{ workflow.parameters.scanId }}"
          - name: GITHUB_KEY_FILE_PATH
            value: "/clusterscanner/github/github_private_key.pem"
          - name: GITHUB_REPOSITORY
            value: "{{ workflow.parameters.allResultsGitTarget }}"
        envFrom:
          - secretRef:
              name: "{{ workflow.parameters.gitSecretName }}"
          - configMapRef:
              name: "scanjob-env-parameter"
        command: [/bin/bash]
        source: |
          set -e
          cd $HOME
          source auth.bash # > /dev/null 2>&1
          source git.bash # > /dev/null 2>&1

          if [ "${RESULT_PATH}" == "" ]; then
            RESULT_PATH=/clusterscanner/data
          fi

          gitAuth
          echo "gitFetch"
          gitFetch


          tmpdir=$(mktemp -d)
          tmpdirBaseImage=$(mktemp -d)
          #echo "tmpdir: ${tmpdir}, tmpdirBaseImage: ${tmpdirBaseImage}"
          echo "RESULT_PATH:"
          ls -la ${RESULT_PATH} 
          for result in $(find ${RESULT_PATH} -name *.json); do
            echo $result
            cat $result 
            team=$(cat $result | jq -r '.team' | sed 's/\s//g' || true)
            age=$(cat $result | jq -r '.scanResults[] | .["scan-lifetime"].age' | grep -v null || true)
            baseImageAge=$(cat $result | jq -r '.scanResults[] | .["scan-baseimage-lifetime"].age' | grep -v null || true)
            environment=$(cat $result | jq -r '.environment' | sed 's/\s//g' || true)
            if [ "${age}" != "" ]; then
              echo ${age} >> ${tmpdir}/${environment}_${team}.txt
            fi
            if [ "${baseImageAge}" != "" ]; then
              echo ${baseImageAge} >> ${tmpdirBaseImage}/${environment}_${team}.txt
            fi
          done

          date=$(date '+%Y-%m-%d')
          mkdir /tmp/clusterscanner-remote/${date} || true

          for j in $(ls ${tmpdir}); do
            result=$(cat ${tmpdir}/${j}  | awk '{if(min==""){min=max=$1}; if($1>max) {max=$1}; if($1<min) {min=$1}; total+=$1; count+=1} END {print total/count, max, min}')
            filename=$(echo ${j} | sed 's#.txt##g')
            echo "lifetime for images is (avg max min) ${result}" >> /tmp/clusterscanner-remote/${date}/${filename}_lifetime.txt
          done

          for j in $(ls ${tmpdirBaseImage}); do
            result=$(cat ${tmpdirBaseImage}/${j}  | awk '{if(min==""){min=max=$1}; if($1>max) {max=$1}; if($1<min) {min=$1}; total+=$1; count+=1} END {print total/count, max, min}')
            filename=$(echo ${j} | sed 's#.txt##g')
            echo "baseimage lifetime for images is (avg max min) ${result}" >> /tmp/clusterscanner-remote/${date}/${filename}_baseimage-lifetime.txt
          done

          cd /tmp/clusterscanner-remote/${date}
          ls -la /tmp/clusterscanner-remote/${date}
          git add * || true
          git commit -m "add" || true

          git push -f origin master || true
