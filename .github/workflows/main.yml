name: Build

on:
  push:
    branches:
      - master
  pull_request:

jobs:
  publish-docs:
    name: Build and publish docs
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      ENTITY_KIND: Component
      ENTITY_NAME: ClusterScanner
    strategy:
      matrix:
        site:
          - directory: ./
            entity_name: clusterscanner
    container:
      image: quay.io/sdase/techdocs:1
    steps:
      - uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f
      - name: build
        run: techdocs-cli generate --no-docker --verbose
        working-directory: ${{ matrix.site.directory }}
      - name: publish
        if: github.ref == 'refs/heads/master'
        run: techdocs-cli publish --publisher-type awsS3 --storage-name "$TECHDOCS_S3_BUCKET_NAME" --entity "$ENTITY"

        working-directory: ${{ matrix.site.directory }}
        env:
          TECHDOCS_S3_BUCKET_NAME: ${{ secrets.TECHDOCS_S3_BUCKET_NAME }}
          AWS_ACCESS_KEY_ID: ${{ secrets.TECHDOCS_S3_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TECHDOCS_S3_SECRET_ACCESS_KEY }}
          ENTITY: ${{ env.ENTITY_NAMESPACE || 'default' }}/${{ env.ENTITY_KIND || 'Component' }}/${{ env.ENTITY_NAME }}
  shellcheck:
    name: runner / shellcheck
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f
      - name: shellcheck
        uses: reviewdog/action-shellcheck@bb5be3440d752c70c5ade03b2b6bf859316db5e2
        with:
          github_token: ${{ secrets.github_token }}
          reporter: github-pr-review
          path: "."
          pattern: "*.*sh"
          exclude: "./.git/*"
          shellcheck_flags: "--external-sources --exclude=SC1090,SC1091,SC2116,SC2015"
  changes:
    runs-on: ubuntu-latest
    needs: shellcheck
    outputs:
      base: ${{ steps.filter.outputs.base }}
      imagesourcefetcher: ${{ steps.filter.outputs.imagesourcefetcher }}
      imagecollector: ${{ steps.filter.outputs.imagecollector }}
      imagefetcher: ${{ steps.filter.outputs.imagefetcher }}
      notifier: ${{ steps.filter.outputs.notifier }}
      dependencycheck: ${{ steps.filter.outputs.dependencycheck }}
      distroless: ${{ steps.filter.outputs.distroless }}
      lifetime: ${{ steps.filter.outputs.lifetime }}
      malware: ${{ steps.filter.outputs.malware }}
      runasroot: ${{ steps.filter.outputs.runasroot }}
    steps:
      - uses: dorny/paths-filter@b2feaf19c27470162a626bd6fa8438ae5b263721
        id: filter
        with:
          filters: |
            base:
              - 'images/base/**'
            imagesourcefetcher:
              - 'images/processing/image-source-fetcher/**'
            imagecollector:
              - 'images/processing/imagecollector/**'
            imagefetcher:
              - 'images/processing/imagefetcher/**'
            notifier:
              - 'images/processing/notifier/**'
            dependencycheck:
              - 'images/scan/dependency-check/**'
            distroless:
              - 'images/scan/distroless/**'
            lifetime:
              - 'images/scan/lifetime/**'
            malware:
              - 'images/scan/malware/**'
            runasroot:
              - 'images/scan/runasroot/**'

  build_image_base:
    needs: changes
    runs-on: ubuntu-latest
    # do not execute for PRs that origin from forks due to security concerns and missing secrets
    if: "${{ needs.changes.outputs.base == 'true' && !(github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork) }}"
    env:
      PATH_TO_BUILD_DIR: images/base
      IMAGE_NAME: clusterscanner-base
    steps: &build_steps
      - uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f
      - name: create and push an image
        run: |
          cd ${PATH_TO_BUILD_DIR}
          chmod +x ./build.sh
          if [ "${GITHUB_REF##*/}" == "master" ]; then
            VERSION="2.0.${GITHUB_RUN_NUMBER}"
          else
            BRANCH_TO_DOCKER=$(echo ${GITHUB_REF##*/} | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9._-]//g')
            VERSION="${BRANCH_TO_DOCKER}-${GITHUB_RUN_NUMBER}"
          fi
          sudo ./build.sh "quay.io" "sdase" "${IMAGE_NAME}" "${VERSION}" "${{ secrets.QUAY_IO_CLUSTERSCANNER_USERNAME }}" "${{ secrets.QUAY_IO_CLUSTERSCANNER_TOKEN }}" true

  build_imagecollector:
    needs: [changes, build_image_base]
    runs-on: ubuntu-latest
    # run on base image change
    # do not execute for PRs that origin from forks due to security concerns and missing secrets
    if: |
      always() &&
      (needs.build_image_base.result == 'success' || needs.build_image_base.result == 'skipped') &&
      needs.changes.outputs.imagecollector == 'true' &&
      ! (github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork)
    env:
      PATH_TO_BUILD_DIR: images/processing/imagecollector
      IMAGE_NAME: clusterscanner-imagecollector
    steps: *build_steps

  build_imagefetcher:
    needs: [changes, build_image_base]
    runs-on: ubuntu-latest
    # run on base image change
    # do not execute for PRs that origin from forks due to security concerns and missing secrets
    if: |
      always() &&
      (needs.build_image_base.result == 'success' || needs.build_image_base.result == 'skipped') &&
      needs.changes.outputs.imagefetcher == 'true' &&
      ! (github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork)
    env:
      PATH_TO_BUILD_DIR: images/processing/imagefetcher
      IMAGE_NAME: clusterscanner-imagefetcher
    steps: *build_steps

  build_imagesourcefetcher:
    needs: [changes, build_image_base]
    runs-on: ubuntu-latest
    # run on base image change
    # do not execute for PRs that origin from forks due to security concerns and missing secrets
    if: |
      always() &&
      (needs.build_image_base.result == 'success' || needs.build_image_base.result == 'skipped') &&
      needs.changes.outputs.imagesourcefetcher == 'true' &&
      ! (github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork)
    env:
      PATH_TO_BUILD_DIR: images/processing/image-source-fetcher
      IMAGE_NAME: clusterscanner-image-source-fetcher
    steps: *build_steps

  build_notifier:
    needs: [changes, build_image_base]
    runs-on: ubuntu-latest
    # run on base image change
    # do not execute for PRs that origin from forks due to security concerns and missing secrets
    if: |
      always() &&
      (needs.build_image_base.result == 'success' || needs.build_image_base.result == 'skipped') &&
      needs.changes.outputs.notifier == 'true' &&
      ! (github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork)
    env:
      PATH_TO_BUILD_DIR: images/processing/notifier
      IMAGE_NAME: clusterscanner-notifier
    steps: *build_steps

  build_dependencycheck:
    needs: [changes, build_image_base]
    runs-on: ubuntu-latest
    # run on base image change
    # do not execute for PRs that origin from forks due to security concerns and missing secrets
    if: |
      always() &&
      (needs.build_image_base.result == 'success' || needs.build_image_base.result == 'skipped') &&
      needs.changes.outputs.dependencycheck == 'true' &&
      ! (github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork)
    env:
      PATH_TO_BUILD_DIR: images/scan/dependency-check
      IMAGE_NAME: clusterscanner-scan-dependency-check
    steps: *build_steps

  build_distroless:
    needs: [changes, build_image_base]
    runs-on: ubuntu-latest
    # run on base image change
    # do not execute for PRs that origin from forks due to security concerns and missing secrets
    if: |
      always() &&
      (needs.build_image_base.result == 'success' || needs.build_image_base.result == 'skipped') &&
      needs.changes.outputs.distroless == 'true' &&
      ! (github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork)
    env:
      PATH_TO_BUILD_DIR: images/scan/distroless
      IMAGE_NAME: clusterscanner-scan-distroless
    steps: *build_steps

  build_lifetime:
    needs: [changes, build_image_base]
    runs-on: ubuntu-latest
    # run on base image change
    # do not execute for PRs that origin from forks due to security concerns and missing secrets
    if: |
      always() &&
      (needs.build_image_base.result == 'success' || needs.build_image_base.result == 'skipped') &&
      needs.changes.outputs.lifetime == 'true' &&
      ! (github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork)
    env:
      PATH_TO_BUILD_DIR: images/scan/lifetime
      IMAGE_NAME: clusterscanner-scan-lifetime
    steps: *build_steps

  build_runasroot:
    needs: [changes, build_image_base]
    runs-on: ubuntu-latest
    # run on base image change
    # do not execute for PRs that origin from forks due to security concerns and missing secrets
    if: |
      always() &&
      (needs.build_image_base.result == 'success' || needs.build_image_base.result == 'skipped') &&
      needs.changes.outputs.runasroot == 'true' &&
      ! (github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork)
    env:
      PATH_TO_BUILD_DIR: images/scan/runasroot
      IMAGE_NAME: clusterscanner-scan-runasroot
    steps: *build_steps
#  build_malware:
#    needs: [changes, build_image_base]
#    runs-on: ubuntu-latest
#    # run on base image change
#    # do not execute for PRs that origin from forks due to security concerns and missing secrets
#    if: |
#      always() &&
#      (needs.build_image_base.result == 'success' || needs.build_image_base.result == 'skipped') &&
#      needs.changes.outputs.malware == 'true' &&
#      ! (github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork)
#    env:
#      PATH_TO_BUILD_DIR: images/scan/malware
#      IMAGE_NAME: clusterscanner-scan-malware
#    steps: *build_steps
