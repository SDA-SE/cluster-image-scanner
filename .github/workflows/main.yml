name: Build Image and Test with Minikube

on:
  push:
  pull_request:
  schedule:
    - cron: "30 6 * * *"
concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  shellcheck:
    name: runner / shellcheck
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f
      - name: shellcheck
        uses: reviewdog/action-shellcheck@f627b974d3005f993dc36f46d2cdf2684be18e5c
        with:
          github_token: ${{ secrets.github_token }}
          reporter: github-pr-review
          path: "."
          pattern: "*.*sh"
          exclude: "./.git/*"
          shellcheck_flags: "--external-sources --exclude=SC1090,SC1091,SC2116,SC2015"

  build_image_base:
    runs-on: ubuntu-latest
    # do not execute for PRs that origin from forks due to security concerns and missing secrets
    if: |
      (github.event_name == 'schedule') ||
      (always() &&
      (github.event_name == 'pull_request' && !github.event.pull_request.head.repo.fork))
    steps:
      - uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f
      - uses: ./.github/actions/build_image
        with:
          image-path: images/base
          image-name: cluster-image-scanner-base
          registry-user: ${{ secrets.QUAY_IO_CLUSTERSCANNER_USERNAME }}
          registry-token: ${{ secrets.QUAY_IO_CLUSTERSCANNER_TOKEN }}

  build_imagecollector:
    needs: [build_image_base]
    runs-on: ubuntu-latest
    # run on base image change
    # do not execute for PRs that origin from forks due to security concerns and missing secrets
    if: |
      (github.event_name == 'schedule') ||
      (always() &&
      (needs.build_image_base.result == 'success' ||
      (needs.build_image_base.result == 'skipped' && needs.changes.outputs.imagecollector == 'true')) &&
      ! (github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork))
    steps:
      - uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f
      - uses: ./.github/actions/build_image
        with:
          image-path: images/process/imagecollector
          image-name: cluster-image-scanner-imagecollector
          registry-user: ${{ secrets.QUAY_IO_CLUSTERSCANNER_USERNAME }}
          registry-token: ${{ secrets.QUAY_IO_CLUSTERSCANNER_TOKEN }}

  build_imagesourcefetcher:
    needs: [build_image_base]
    runs-on: ubuntu-latest
    # run on base image change
    # do not execute for PRs that origin from forks due to security concerns and missing secrets
    if: |
      (github.event_name == 'schedule') ||
      (always() &&
      (needs.build_image_base.result == 'success' ||
      (needs.build_image_base.result == 'skipped' && needs.changes.outputs.imagesourcefetcher == 'true')) &&
      ! (github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork))
    steps:
      - uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f
      - uses: ./.github/actions/build_image
        with:
          image-path: images/process/image-source-fetcher
          image-name: cluster-image-scanner-image-source-fetcher
          registry-user: ${{ secrets.QUAY_IO_CLUSTERSCANNER_USERNAME }}
          registry-token: ${{ secrets.QUAY_IO_CLUSTERSCANNER_TOKEN }}

  build_workflowrunner:
    needs: [build_image_base]
    runs-on: ubuntu-latest
    # run on base image change
    # do not execute for PRs that origin from forks due to security concerns and missing secrets
    if: |
      (github.event_name == 'schedule') ||
      (always() &&
      (needs.build_image_base.result == 'success' ||
      (needs.build_image_base.result == 'skipped' && needs.changes.outputs.workflowrunner == 'true')) &&
      ! (github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork))
    steps:
      - uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f
      - uses: ./.github/actions/build_image
        with:
          image-path: images/process/workflow-runner
          image-name: cluster-image-scanner-workflow-runner
          registry-user: ${{ secrets.QUAY_IO_CLUSTERSCANNER_USERNAME }}
          registry-token: ${{ secrets.QUAY_IO_CLUSTERSCANNER_TOKEN }}

  build_dependencycheck:
    needs: [build_image_base]
    runs-on: ubuntu-latest
    # run on base image change
    # do not execute for PRs that origin from forks due to security concerns and missing secrets
    if: |
      (github.event_name == 'schedule') ||
      (always() &&
      (needs.build_image_base.result == 'success' ||
      (needs.build_image_base.result == 'skipped' && needs.changes.outputs.dependencycheck == 'true')) &&
      ! (github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork))
    steps:
      - uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f
      - uses: ./.github/actions/build_image
        with:
          image-path: images/scan/dependency-check
          image-name: cluster-image-scanner-scan-dependency-check
          registry-user: ${{ secrets.QUAY_IO_CLUSTERSCANNER_USERNAME }}
          registry-token: ${{ secrets.QUAY_IO_CLUSTERSCANNER_TOKEN }}

  build_distroless:
    needs: [build_image_base]
    runs-on: ubuntu-latest
    # run on base image change
    # do not execute for PRs that origin from forks due to security concerns and missing secrets
    if: |
      (github.event_name == 'schedule') ||
      (always() &&
      (needs.build_image_base.result == 'success' ||
      (needs.build_image_base.result == 'skipped' && needs.changes.outputs.distroless == 'true')) &&
      ! (github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork))
    steps:
      - uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f
      - uses: ./.github/actions/build_image
        with:
          image-path: images/scan/distroless
          image-name: cluster-image-scanner-scan-distroless
          registry-user: ${{ secrets.QUAY_IO_CLUSTERSCANNER_USERNAME }}
          registry-token: ${{ secrets.QUAY_IO_CLUSTERSCANNER_TOKEN }}

  build_lifetime:
    needs: [build_image_base]
    runs-on: ubuntu-latest
    # run on base image change
    # do not execute for PRs that origin from forks due to security concerns and missing secrets
    if: |
      (github.event_name == 'schedule') ||
      (always() &&
      (needs.build_image_base.result == 'success' ||
      (needs.build_image_base.result == 'skipped' && needs.changes.outputs.lifetime == 'true')) &&
      ! (github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork))
    steps:
      - uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f
      - uses: ./.github/actions/build_image
        with:
          image-path: images/scan/lifetime
          image-name: cluster-image-scanner-scan-lifetime
          registry-user: ${{ secrets.QUAY_IO_CLUSTERSCANNER_USERNAME }}
          registry-token: ${{ secrets.QUAY_IO_CLUSTERSCANNER_TOKEN }}

  build_runasroot:
    needs: [build_image_base]
    runs-on: ubuntu-latest
    # run on base image change
    # do not execute for PRs that origin from forks due to security concerns and missing secrets
    if: |
      (github.event_name == 'schedule') ||
      (always() &&
      (needs.build_image_base.result == 'success' ||
      (needs.build_image_base.result == 'skipped' && needs.changes.outputs.runasroot == 'true')) &&
      ! (github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork))
    steps:
      - uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f
      - uses: ./.github/actions/build_image
        with:
          image-path: images/scan/runasroot
          image-name: cluster-image-scanner-scan-runasroot
          registry-user: ${{ secrets.QUAY_IO_CLUSTERSCANNER_USERNAME }}
          registry-token: ${{ secrets.QUAY_IO_CLUSTERSCANNER_TOKEN }}

  build_new-version:
    needs: [build_image_base]
    runs-on: ubuntu-latest
    # run on base image change
    # do not execute for PRs that origin from forks due to security concerns and missing secrets
    if: |
      (github.event_name == 'schedule') ||
      (always() &&
      (needs.build_image_base.result == 'success' ||
      (needs.build_image_base.result == 'skipped' && needs.changes.outputs.new-version == 'true')) &&
      ! (github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork))
    steps:
      - uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f
      - uses: ./.github/actions/build_image
        with:
          image-path: images/scan/new-version
          image-name: cluster-image-scanner-scan-new-version
          registry-user: ${{ secrets.QUAY_IO_CLUSTERSCANNER_USERNAME }}
          registry-token: ${{ secrets.QUAY_IO_CLUSTERSCANNER_TOKEN }}

  build_malware:
    needs: [build_image_base]
    runs-on: ubuntu-latest
    # run on base image change
    # do not execute for PRs that origin from forks due to security concerns and missing secrets
    if: |
      (github.event_name == 'schedule') ||
      (always() &&
      (needs.build_image_base.result == 'success' ||
      (needs.build_image_base.result == 'skipped' && needs.changes.outputs.malware == 'true')) &&
      ! (github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork))
    steps:
      - uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f
      - uses: ./.github/actions/build_image
        with:
          image-path: images/scan/malware
          image-name: cluster-image-scanner-scan-malware
          registry-user: ${{ secrets.QUAY_IO_CLUSTERSCANNER_USERNAME }}
          registry-token: ${{ secrets.QUAY_IO_CLUSTERSCANNER_TOKEN }}

  build_syft:
    needs: [build_image_base]
    runs-on: ubuntu-latest
    # run on base image change
    # do not execute for PRs that origin from forks due to security concerns and missing secrets
    if: |
      (github.event_name == 'schedule') ||
      (always() &&
      (needs.build_image_base.result == 'success' ||
      (needs.build_image_base.result == 'skipped' && needs.changes.outputs.syft == 'true')) &&
      ! (github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork))
    steps:
      - uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f
      - uses: ./.github/actions/build_image
        with:
          image-path: images/scan/syft
          image-name: cluster-image-scanner-scan-syft
          registry-user: ${{ secrets.QUAY_IO_CLUSTERSCANNER_USERNAME }}
          registry-token: ${{ secrets.QUAY_IO_CLUSTERSCANNER_TOKEN }}

  build_notifier:
    needs: [build_image_base]
    runs-on: ubuntu-latest
    # run on base image change
    # do not execute for PRs that origin from forks due to security concerns and missing secrets
    if: |
      (github.event_name == 'schedule') ||
      (always() &&
      (needs.build_image_base.result == 'success' ||
      (needs.build_image_base.result == 'skipped' && needs.changes.outputs.syft == 'true')) &&
      ! (github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork))
    steps:
      - uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f
      - uses: ./.github/actions/build_image
        with:
          image-path: images/process/notifier
          image-name: cluster-image-scanner-notifier
          registry-user: ${{ secrets.QUAY_IO_CLUSTERSCANNER_USERNAME }}
          registry-token: ${{ secrets.QUAY_IO_CLUSTERSCANNER_TOKEN }}

  test_minikube:
    needs:
      [
        build_image_base,
        build_imagecollector,
        build_imagesourcefetcher,
        build_workflowrunner,
        build_dependencycheck,
        build_distroless,
        build_lifetime,
        build_runasroot,
        build_new-version,
        #build_malware, # takes too long to wait
        build_notifier,
        build_syft
      ]
    if: (github.event_name == 'schedule') || (github.event_name == 'pull_request' && !github.event.pull_request.head.repo.fork)
    runs-on: ubuntu-latest
    timeout-minutes: 120
    steps:
      - uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f
      - name: start minikube
        id: minikube
        uses: medyagh/setup-minikube@master          
      - name: setup, execute and run test
        env:
          DD_TOKEN_SECRET: "${{secrets.DD_TOKEN_SECRET}}"
          DD_URL_PLACEHOLDER: "${{secrets.DD_URL_PLACEHOLDER}}"
          DD_USER_PLACEHOLDER: "${{secrets.DD_USER_PLACEHOLDER}}"
          SLACK_CLI_TOKEN_SECRET: "${{secrets.SLACK_CLI_TOKEN_SECRET}}"
          DEPSCAN_DB_DRIVER_PLACEHOLDER: "${{secrets.DEPSCAN_DB_DRIVER_PLACEHOLDER}}"
          DEPSCAN_DB_USERNAME_PLACEHOLDER: "${{secrets.DEPSCAN_DB_USERNAME_PLACEHOLDER}}"
          DEPSCAN_DB_CONNECTSRING_PLACEHOLDER: "${{secrets.DEPSCAN_DB_CONNECTSRING_PLACEHOLDER}}"
          DEPSCAN_DB_PASSWORD_PLACEHOLDER: "${{secrets.DEPSCAN_DB_PASSWORD_PLACEHOLDER}}"
          GH_PRIVATE_KEY_BASE64: "${{secrets.GH_PRIVATE_KEY_BASE64}}"
          GH_APP_LOGIN: "SDA-SE"
          GH_APP_ID: "143160"
          GH_INSTALLATION_ID: "19959424"
          GIT_SOURCE_REPOSITORY: "https://api.github.com/repos/SDA-SE/cluster-image-scanner-sda-internal-test-images/tarball"
          GIT_COLLECTOR_REPOSITORY: "github.com/SDA-SE/cluster-image-scanner-sda-internal-test-images.git"
        run: |
          pwd
          ls
          cd test_actions
          ./setup.bash
