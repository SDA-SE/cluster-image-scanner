#!/bin/bash
set -e

if [ $# -ne 7 ]; then
  echo "Parameters are not set correctly"
  exit 1
fi

REGISTRY=$1
ORGANIZATION=$2
IMAGE_NAME=$3
VERSION=$4
REGISTRY_USER=$5
REGISTRY_TOKEN=$6
BUILD_EXPORT_OCI_ARCHIVES=$7

MAJOR=$(echo "${VERSION}" | tr  '.' "\n" | sed -n 1p)
MINOR=$(echo "${VERSION}" | tr  '.' "\n" | sed -n 2p)

oci_prefix="org.opencontainers.image"
descr="Check for malware in images"

trap cleanup INT EXIT
cleanup() {
  test -n "${ctr}" && buildah rm "${ctr}" || true
  test -n "${ctr_tools}" && buildah rm "${ctr_tools}" || true
}

dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
build_dir="${dir}/build"

base_image="quay.io/sdase/cluster-image-scanner-base:2"
ctr="$( buildah from --pull --quiet "${base_image}")"
mnt="$( buildah mount "${ctr}" )"

base_image="registry.access.redhat.com/ubi8/ubi-init" # minimal doesn't have useradd
base_image="docker://clamav/clamav:unstable" # minimal doesn't have useradd
ctr_tools="$( buildah from --pull --quiet "${base_image}")"
mnt_tools="$( buildah mount "${ctr_tools}")"

dnf_opts=(
  #"--disableplugin=*"
  "--installroot=/mnt"
  "--assumeyes"
  "--setopt=install_weak_deps=false"
  "--releasever=8"
  "--setopt=tsflags=nocontexts,nodocs"
  "--quiet"
)
#buildah run --user 0:0 "${ctr_tools}" --  find / | grep clam
rsync -a ${mnt_tools}/etc/clamav ${mnt}/etc/
rsync -a ${mnt_tools}/var/log/clamav ${mnt}/var/log
rsync -a ${mnt_tools}/var/lib/clamav ${mnt}/var/lib/clamav

filesToCopy=(
/usr/bin/clamsubmit
/usr/bin/clamdscan
/usr/bin/clamav-config
/usr/bin/clambc
/usr/bin/clamconf
/usr/bin/clamscan
/usr/bin/freshclam
/usr/bin/clamdtop
/usr/local/bin/clamdcheck.sh
/usr/lib/libfreshclam.so
/usr/lib/libclamunrar.so
/usr/lib/libclamav.so.9
/usr/lib/libfreshclam.so.2.0.2
/usr/lib/libclamunrar_iface.so.9
/usr/lib/libclamav.so.9.0.6
/usr/lib/libclamunrar.so.5.7.5
/usr/lib/libfreshclam.so.2
/usr/lib/libclamunrar_iface.so.9.0.6
/usr/lib/libclamav.so
/usr/lib/libclamunrar.so.5
/usr/lib/libclamunrar_iface.so
/usr/sbin/clamav-milter
/usr/sbin/clamd
)
for i in "${filesToCopy[@]}";do
  echo $i
  cp -a ${mnt_tools}/$i ${mnt}/$i
done
buildah run --user 0:0 "${ctr}" --  ls -la /usr/bin/
#buildah run --volume "${mnt}":/mnt "${ctr_tools}" -- cp -a /etc/yum.repos.d/ /mnt/etc/
#buildah run --user 0:0 "${ctr_tools}" --  find /
buildah run --user 0:0 "${ctr}" --  /usr/bin/freshclam -v --stdout



# ClusterImageScanner specifics
cp module.bash "${mnt}/clusterscanner/"
cp env.bash "${mnt}/clusterscanner/"
cp ddTemplate.csv "${mnt}/clusterscanner/"

# Get a bill of materials
base_bill_of_materials_hash=$(buildah inspect --type image "${base_image}"  | jq '.OCIv1.config.Labels."io.sda-se.image.bill-of-materials-hash"')
#echo "base_bill_of_materials_hash $base_bill_of_materials_hash"
bill_of_materials_hash="$( ( cat "${0}";
  echo "${base_bill_of_materials_hash}"; \
  cat ./*; \
  ) | sha256sum | awk '{ print $1 }' )"
echo "bill_of_materials: $bill_of_materials_hash";
buildah config \
  --label "${oci_prefix}.url=https://quay.io/sdase/cluster-image-scanner-scan-malware" \
  --label "${oci_prefix}.source=https://github.com/SDA-SE/clusterscanner-scan-malware" \
  --label "${oci_prefix}.revision=$( git rev-parse HEAD )" \
  --label "${oci_prefix}.version=${VERSION}" \
  --label "${oci_prefix}.title=ClusterImageScanner Malware Scan" \
  --label "${oci_prefix}.description=${descr}" \
  --label "io.sda-se.image.bill-of-materials-hash=${bill_of_materials_hash}" \
  --env 'RESULT_CACHING_HOURS=4' \
  "${ctr}"

buildah commit --quiet "${ctr}" "${IMAGE_NAME}:${VERSION}" && ctr=

if [ -n "${BUILD_EXPORT_OCI_ARCHIVES}" ]
then
  mkdir --parent "${build_dir}"
  image="docker://${REGISTRY}/${ORGANIZATION}/${IMAGE_NAME}:${VERSION}"
  buildah push --quiet --creds "${REGISTRY_USER}:${REGISTRY_TOKEN}" "${IMAGE_NAME}:${VERSION}" "${image}"

  image="docker://${REGISTRY}/${ORGANIZATION}/${IMAGE_NAME}:${MAJOR}.${MINOR}"
  buildah push --quiet --creds "${REGISTRY_USER}:${REGISTRY_TOKEN}" "${IMAGE_NAME}:${VERSION}" "${image}"

  image="docker://${REGISTRY}/${ORGANIZATION}/${IMAGE_NAME}:${MAJOR}"
  buildah push --quiet --creds "${REGISTRY_USER}:${REGISTRY_TOKEN}" "${IMAGE_NAME}:${VERSION}" "${image}"

  buildah rmi "${IMAGE_NAME}:${VERSION}"
fi

cleanup
