#!/bin/bash

set -e

# shellcheck source=../../base/scan-common.bash
source ./scan-common.bash

# Initialize variables with default values
MAX_FILESIZE="4000M"
# IMAGE_BY_HASH=""
# IMAGE_TAR_PATH=""
# ARTIFACTS_PATH=""
# 
# while getopts "i:t:s:a:" opt; do
#   case $opt in
#     i)
#       IMAGE_BY_HASH="$OPTARG"
#       ;;
#     t)
#       IMAGE_TAR_PATH="$OPTARG"
#       ;;
#     s)
#       MAX_FILESIZE="$OPTARG"
#       ;;
#     a)
#       ARTIFACTS_PATH="$OPTARG"
#       ;;
#     \?)
#       echo "Invalid option: -$OPTARG" >&2
#       exit 1
#       ;;
#     :)
#       echo "Option -$OPTARG requires an argument." >&2
#       exit 1
#       ;;
#   esac
# done
# 
# if [[ -z "$IMAGE_BY_HASH" || -z "$IMAGE_TAR_PATH" || -z "$ARTIFACTS_PATH" ]]; then
#   echo "Error: one or more parameters is empty" >&2
#   exit 1
# fi
# 
# >&3 echo "i: $IMAGE_BY_HASH, t: $IMAGE_TAR_PATH, s: $MAX_FILESIZE, a: $ARTIFACTS_PATH"

scan_result_pre

JSONFILE="${ARTIFACTS_PATH}/malware.json"

echo "Scanning ${IMAGE_BY_HASH} ${IMAGE} in ${IMAGE_TAR_PATH}"
LOGFILE="${ARTIFACTS_PATH}/clamav-$(date +%s).log"
echo "CLAMAV_SIGNATURE_IGNORE: ${CLAMAV_SIGNATURE_IGNORE}"
echo "Tar-size: "
ls -la "${IMAGE_TAR_PATH}"
set +e
clamscan --max-filesize="${MAX_FILESIZE}" --max-scansize="${MAX_FILESIZE}" --infected --recursive --log="${LOGFILE}" "${IMAGE_TAR_PATH}"
CLAM_RETURN_CODE=$?
echo "CLAM_RETURN_CODE: ${CLAM_RETURN_CODE}"
set -e

if [ ${CLAM_RETURN_CODE} -eq 1 ]; then
  echo "ClamAV found malware, checking for ignored signatures"
  set +e # grep -v returns 1 if no lines are found
  detectedMalware=$(cat "${LOGFILE}" | grep " FOUND" | awk '{print $2}' | grep -v "${CLAMAV_SIGNATURE_IGNORE}")
  echo "$detectedMalware" > /tmp/detectedMalware.txt
  detectedMalwareCount=$(grep -c -v '^$' /tmp/detectedMalware.txt)
  set -e
  echo "detectedMalwareCountFiltered=${detectedMalwareCount}" # number of malware without signatures that should be ignored

fi

if [ ${CLAM_RETURN_CODE} -eq 0 ] || [ ${detectedMalwareCount} -eq 0 ]; then
  echo "JSON_RESULT: ${JSON_RESULT}"
  JSON_RESULT=$(echo "${JSON_RESULT}" | jq -Sc ". += {\"status\": \"completed\", \"finding\": false}")
elif [ ${CLAM_RETURN_CODE} -eq 1 ]; then
  infoText="Potential malware found in ${IMAGE_BY_HASH}\nSignature(s): ${detectedMalware}"
  echo "${infoText}"
  JSON_RESULT=$(echo "${JSON_RESULT}" | jq -Sc ". += {\"status\": \"completed\", \"finding\": true, \"infoText\": \"${infoText}\"}")
  cp /clusterscanner/malware.json "$JSONFILE"
  sanitizedInfoText=$(echo "${infoText}" | sed 's#{#\\\\{#g'  | sed 's#}#\\\\}#g' | tr -d '|')
  JSON=$(<"$JSONFILE")
  JSON=$(add_json_field infoText "$sanitizedInfoText" "$JSON" description)

  if [ -z "$JSON" ]; then
    echo "error creating result JSON"
    exit 1
  else
    echo "$JSON" > "$JSONFILE"
  fi
else
  infoText="Malware exited with the unexpected code ${CLAM_RETURN_CODE} in ${IMAGE_BY_HASH}, log: ${LOGFILE}"
  echo "${infoText}"
  cat "${LOGFILE}"
  JSON_RESULT=$(echo "${JSON_RESULT}" | jq -Sc ". += {\"status\": \"failed\", \"infoText\": \"${infoText}\"}")
fi

scan_result_post

if [ ${CLAM_RETURN_CODE} -eq 0 ] || [ "${detectedMalwareCount}" -eq 0 ]; then
  exit 0
fi
exit ${CLAM_RETURN_CODE}
