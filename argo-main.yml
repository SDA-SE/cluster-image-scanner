apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: orchestration-
spec:
  onExit: notify-teams
  serviceAccountName: clusterscanner
  ttlStrategy:
    secondsAfterSuccess: 3600
    secondsAfterFailure: 86400
  artifactRepositoryRef:
    configMap: artifact-repositories
    key: default-v1
  entrypoint: main
  arguments:
    parameters:
      - name: scanId
        value: "{{ workflow.creationTimestamp.Y }}{{ workflow.creationTimestamp.m }}{{ workflow.creationTimestamp.d }}_{{ workflow.creationTimestamp.H }}{{ workflow.creationTimestamp.M }}{{ workflow.creationTimestamp.S }}"
  templates:
    - name: main
      steps:
        - - name: fetch-image-list
            template: fetch-image-list
        - - name: run-subflow
            template: subflow
            arguments:
              artifacts:
                - name: imageList
                  from: "{{steps.fetch-image-list.outputs.artifacts.image-list-merged}}"
              parameters:
                - name: REGISTRY_SECRET
                  value: registry-sda-default
                - name: DEPENDENCY_SCAN_CM
                  value: dependency-check-db
                - name: DEFECTDOJO_CM
                  value: defectdojo-test
                - name: DEFECTDOJO_SECRETS
                  value: defectdojo-test


    - name: fetch-image-list
      outputs:
        artifacts:
          - name: image-lists
            path: /clusterscanner/out
            archive:
              none: {}
          - name: image-list-merged
            path: /clusterscanner/out/merged/merged.json
            archive:
              none: {}
      volumes:
        - name: image-source-list
          configMap:
            name: image-source-list
        - name: github
          secret:
            secretName: github
        - name: tmp
          emptyDir: {}
      script:
        image: quay.io/sdase/clusterscanner-base:2
        imagePullPolicy: Always
        volumeMounts:
          - name: github
            mountPath: /clusterscanner/github/github_private_key.pem
            subPath: github_private_key.pem
          - name: image-source-list
            mountPath: /clusterscanner/image-source-list
          - name: tmp
            mountPath: /clusterscanner/out
        env:
          - name: GITHUB_KEY_FILE_PATH
            value: /clusterscanner/github/github_private_key.pem
        envFrom:
          - secretRef:
              name: "github"
        command: [/bin/bash]
        workingDir: /clusterscanner
        source: |
          set -e
          source auth.bash # > /dev/null 2>&1
          sp_authorize #> /dev/null 2>&1
          i=1
          for repofile in /clusterscanner/image-source-list/*; do
            repourl=$(cat $repofile)
            echo "$i: $repofile $repourl"
            sp_getfile $repourl /clusterscanner/out/$i.json #> /dev/null 2>&1#
            if [ $(grep 'image' /clusterscanner/out/$i.json | wc -l) -eq 0 ]; then
              echo "Could not get repo $repourl from ($repofile) or the repos doesn't include images"
              exit 1
            fi
            ((i=i+1))
          done
          mkdir -p /clusterscanner/out/merged
          jq -s 'flatten' /clusterscanner/out/*.json > /clusterscanner/out/merged/merged.json
          sed -i 's#"scm_source_branch": null#"scm_source_branch": "notset"#g' /clusterscanner/out/merged/merged.json
          echo "done"
          exit 0

    - name: subflow
      inputs:
        parameters:
          - name: REGISTRY_SECRET
          - name: DEPENDENCY_SCAN_CM
          - name: DEFECTDOJO_CM
          - name: DEFECTDOJO_SECRETS
        artifacts:
          - name: imageList
            path: /clusterscanner/imageList.json
      script:
        image: quay.io/sdase/clusterscanner-imagecollector:2
        imagePullPolicy: Always
        command: [/bin/bash]
        workingDir: /clusterscanner
        source: |
          cat /clusterscanner/imageList.json | jq -cMr '.[] | @base64' > /clusterscanner/imageListSeparated.json
          cat /clusterscanner/imageListSeparated.json | while read line
          do
            echo "YXBpVmVyc2lvbjogYXJnb3Byb2ouaW8vdjFhbHBoYTEKa2luZDogV29ya2Zsb3cKbWV0YWRhdGE6CiAgZ2VuZXJhdGVOYW1lOiBzY2Fuam9iLSMjI2Vudmlyb25tZW50IyMjLSMjI25hbWVzcGFjZSMjIy0jIyN0ZWFtIyMjLQogIGxhYmVsczoKICAgIGNsdXN0ZXJzY2FubmVyLnNkYS5zZS9zY2FuLWlkOiAiIyMjU0NBTl9JRCMjIyIKc3BlYzoKICBhcmd1bWVudHM6CiAgICBwYXJhbWV0ZXJzOgogICAgICAtIG5hbWU6IFJFR0lTVFJZX1NFQ1JFVAogICAgICAgIHZhbHVlOiAiIyMjUkVHSVNUUllfU0VDUkVUIyMjIgogICAgICAtIG5hbWU6IERFUEVOREVOQ1lfU0NBTl9DTQogICAgICAgIHZhbHVlOiAiIyMjREVQRU5ERU5DWV9TQ0FOX0NNIyMjIgogICAgICAtIG5hbWU6IERFRkVDVERPSk9fQ00KICAgICAgICB2YWx1ZTogIiMjI0RFRkVDVERPSk9fQ00jIyMiCiAgICAgIC0gbmFtZTogREVGRUNURE9KT19TRUNSRVRTCiAgICAgICAgdmFsdWU6ICIjIyNERUZFQ1RET0pPX1NFQ1JFVFMjIyMiCiAgICAgIC0gbmFtZTogU0NBTl9JRAogICAgICAgIHZhbHVlOiAiIyMjU0NBTl9JRCMjIyIKICAgICAgLSBuYW1lOiB0ZWFtCiAgICAgICAgdmFsdWU6ICIjIyN0ZWFtIyMjIgogICAgICAtIG5hbWU6IGVudmlyb25tZW50CiAgICAgICAgdmFsdWU6ICIjIyNlbnZpcm9ubWVudCMjIyIKICAgICAgLSBuYW1lOiBuYW1lc3BhY2UKICAgICAgICB2YWx1ZTogIiMjI25hbWVzcGFjZSMjIyIKICAgICAgLSBuYW1lOiBzY21fc291cmNlX2JyYW5jaAogICAgICAgIHZhbHVlOiAiIyMjc2NtX3NvdXJjZV9icmFuY2gjIyMiCiAgICAgIC0gbmFtZTogaW1hZ2UKICAgICAgICB2YWx1ZTogIiMjI2ltYWdlIyMjIgogICAgICAtIG5hbWU6IGltYWdlX2lkCiAgICAgICAgdmFsdWU6ICIjIyNpbWFnZV9pZCMjIyIKICAgICAgLSBuYW1lOiBzbGFjawogICAgICAgIHZhbHVlOiAiIyMjc2xhY2sjIyMiCiAgICAgIC0gbmFtZTogaXNfc2Nhbl9saWZldGltZQogICAgICAgIHZhbHVlOiAiIyMjaXNfc2Nhbl9saWZldGltZSMjIyIKICAgICAgLSBuYW1lOiBpc19zY2FuX2Rpc3Ryb2xlc3MKICAgICAgICB2YWx1ZTogIiMjI2lzX3NjYW5fZGlzdHJvbGVzcyMjIyIKICAgICAgLSBuYW1lOiBpc19zY2FuX21hbHdhcmUKICAgICAgICB2YWx1ZTogIiMjI2lzX3NjYW5fbWFsd2FyZSMjIyIKICAgICAgLSBuYW1lOiBpc19zY2FuX2RlcGVuZGVuY3lfY2hlY2sKICAgICAgICB2YWx1ZTogIiMjI2lzX3NjYW5fZGVwZW5kZW5jeV9jaGVjayMjIyIKICAgICAgLSBuYW1lOiBpc19zY2FuX3J1bmFzcm9vdAogICAgICAgIHZhbHVlOiAiIyMjaXNfc2Nhbl9ydW5hc3Jvb3QjIyMiCiAgICAgIC0gbmFtZTogc2Nhbl9saWZldGltZV9tYXhfZGF5cwogICAgICAgIHZhbHVlOiAiIyMjc2Nhbl9saWZldGltZV9tYXhfZGF5cyMjIyIKICB3b3JrZmxvd1RlbXBsYXRlUmVmOgogICAgbmFtZTogc2Nhbi1pbWFnZS1qb2IK" | base64 -d > /clusterscanner/template.yml
            DATA_JSON=$(echo $line | base64 -d | jq -cM .)
            if [[ "$(echo "${DATA_JSON}" | jq -r '.skip')" == "true" ]]; do
              continue
            fi
            sed -i "s~###REGISTRY_SECRET###~{{ inputs.parameters.REGISTRY_SECRET }}~" /clusterscanner/template.yml
            sed -i "s~###DEPENDENCY_SCAN_CM###~{{ inputs.parameters.DEPENDENCY_SCAN_CM }}~" /clusterscanner/template.yml
            sed -i "s~###DEFECTDOJO_CM###~{{ inputs.parameters.DEFECTDOJO_CM }}~" /clusterscanner/template.yml
            sed -i "s~###DEFECTDOJO_SECRETS###~{{ inputs.parameters.DEFECTDOJO_SECRETS }}~" /clusterscanner/template.yml
            sed -i "s~###SCAN_ID###~{{ workflow.creationTimestamp.Y }}{{ workflow.creationTimestamp.m }}{{ workflow.creationTimestamp.d }}-{{ workflow.creationTimestamp.H }}{{ workflow.creationTimestamp.M }}{{ workflow.creationTimestamp.S }}~" /clusterscanner/template.yml
            sed -i "s~###team###~$(echo ${DATA_JSON} | jq -r .team)~" /clusterscanner/template.yml
            sed -i "s~###environment###~$(echo ${DATA_JSON} | jq -r .environment)~" /clusterscanner/template.yml
            sed -i "s~###namespace###~$(echo ${DATA_JSON} | jq -r .namespace)~" /clusterscanner/template.yml
            sed -i "s~###scm_source_branch###~$(echo ${DATA_JSON} | jq -r .scm_source_branch)~" /clusterscanner/template.yml
            sed -i "s~###image###~$(echo ${DATA_JSON} | jq -r .image)~" /clusterscanner/template.yml
            sed -i "s~###image_id###~$(echo ${DATA_JSON} | jq -r .image_id)~" /clusterscanner/template.yml
            sed -i "s~###slack###~$(echo ${DATA_JSON} | jq -r .slack)~" /clusterscanner/template.yml
            sed -i "s~###is_scan_lifetime###~$(echo ${DATA_JSON} | jq -r .is_scan_lifetime)~" /clusterscanner/template.yml
            sed -i "s~###is_scan_distroless###~$(echo ${DATA_JSON} | jq -r .is_scan_distroless)~" /clusterscanner/template.yml
            sed -i "s~###is_scan_malware###~$(echo ${DATA_JSON} | jq -r .is_scan_malware)~" /clusterscanner/template.yml
            sed -i "s~###is_scan_dependency_check###~$(echo ${DATA_JSON} | jq -r .is_scan_dependency_check)~" /clusterscanner/template.yml
            sed -i "s~###is_scan_runasroot###~$(echo ${DATA_JSON} | jq -r .is_scan_runasroot)~" /clusterscanner/template.yml
            sed -i "s~###scan_lifetime_max_days###~$(echo ${DATA_JSON} | jq -r .scan_lifetime_max_days)~" /clusterscanner/template.yml
            cat /clusterscanner/template.yml
            kubectl create -n clusterscanner -f /clusterscanner/template.yml
          done
          while [[ "$(argo list --running -n clusterscanner -l clusterscanner.sda.se/scan-id={{ workflow.creationTimestamp.Y }}{{ workflow.creationTimestamp.m }}{{ workflow.creationTimestamp.d }}-{{ workflow.creationTimestamp.H }}{{ workflow.creationTimestamp.M }}{{ workflow.creationTimestamp.S }} | wc -l)" -gt 1 ]]; do
            echo "There are still workflows running, waiting another 10 seconds"
            sleep 10
          done

    - name: notify-teams
      volumes:
        - name: scandata
          persistentVolumeClaim:
            claimName: clusterscanner-scandata
      container:
        image: quay.io/sdase/clusterscanner-notifier:2
        volumeMounts:
          - name: scandata
            mountPath: /clusterscanner/data
            subPath: "{{ workflow.parameters.scanId }}"
        imagePullPolicy: Always
        env:
          - name: SLACK_CLI_TOKEN
            valueFrom:
              secretKeyRef:
                name: slacktoken
                key: SLACK_CLI_TOKEN
          - name: smtp
            valueFrom:
              secretKeyRef:
                name: email
                key: smtp
          - name: smtp-auth
            valueFrom:
              secretKeyRef:
                name: email
                key: smtp-auth
          - name: smtp-auth-user
            valueFrom:
              secretKeyRef:
                name: email
                key: smtp-auth-user
          - name:  smtp-auth-password
            valueFrom:
              secretKeyRef:
                name: email
                key: smtp-auth-password
          - name: ENFORCE_SLACK_CHANNEL
            value: "#security-notifications-test"
